from itm import UCProtocol
from utils import waits, wait_for
import logging

log = logging.getLogger(__name__)

class Commitment_Prot(UCProtocol):
    def __init__(self, k, bits, sid, pid, channels, pump, poly, importargs):
        self.ssid = sid[0]
        self.committer = sid[1]
        self.receiver = sid[2]
        self.iscommitter = pid == self.committer
        UCProtocol.__init__(sef, k, bits, sid, pid, channels, poly, importargs) 

        self.bit = None
        self.nonce = None

        self.commitment = -1

    def commit(self, bit):
        self.nonce = self.sample(self.k)
        self.bit = bit
        self.write('p2f', ((self.sid, 'F_ro'), ('ro', self.nonce, self.bit)))
        m = wait_for(self.channels['p2f'])
        assert m.imp == 0
        print('hash', m)

    def env_msg(self, m):
        if not self.bit and self.iscommitter and d.msg[0] == 'commit':
            _,bit = d.msg
            self.commit(bit)
        else:
            self.pump.write('')
