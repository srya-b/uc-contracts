DEBUG:WrappedProtocolWrapper:[1m[WrappedProtocol PWrapper][0m Creating new party with pid: 1
DEBUG:WrappedProtocolWrapper:[1m[1][0m Party is corrupt, so ITMCruptWrappedPassthrough
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 1, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 1
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 1, 3), 'F_chan'), msg=('send', ('VAL', 1))
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 1, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 2
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 1, 3), 'F_chan'), msg=('send', ('VAL', 2))
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 1, 3), 'F_chan'), ('schedule', 4, 0, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 1, 3), 'F_chan'), ('send', ('VAL', 1)), 0), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 1, 3), 'F_chan'), ('schedule', 4, 1, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 1, 3), 'F_chan'), ('send', ('VAL', 2)), 0)], 0) 

DEBUG:RBC_Simulator:Add n=2 delay to ideal world wrapper
DEBUG:RBC_Simulator:		[94m wrapper_poll Simulation beginning[0m
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([], 0) 

DEBUG:RBC_Simulator:Add n=0 delay to ideal world wrapper
DEBUG:RBC_Simulator:		[94m poll Simulation finished[0m
DEBUG:RBC_Simulator:		[94m wrapper_poll Simulation beginning[0m
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([], 0) 

DEBUG:RBC_Simulator:Add n=0 delay to ideal world wrapper
DEBUG:RBC_Simulator:		[94m poll Simulation finished[0m
DEBUG:RBC_Simulator:		[94m wrapper_poll Simulation beginning[0m
DEBUG:WrappedProtocolWrapper:[1m[WrappedProtocol PWrapper][0m Creating new party with pid: 2
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 3
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), msg=('send', ('ECHO', 1))
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 3), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 4
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 3), 4, 3), 'F_chan'), msg=('send', ('ECHO', 1))
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 5
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan'), msg=('send', ('ECHO', 1))
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([((('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('schedule', 7, 0, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('send', ('ECHO', 1)), 0), ((('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 3), 4, 3), 'F_chan'), ('schedule', 7, 1, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 3), 4, 3), 'F_chan'), ('send', ('ECHO', 1)), 0), ((('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan'), ('schedule', 7, 2, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan'), ('send', ('ECHO', 1)), 0)], 0) 

DEBUG:RBC_Simulator:Add n=3 delay to ideal world wrapper
DEBUG:RBC_Simulator:		[94m poll Simulation finished[0m
DEBUG:RBC_Simulator:		[94m wrapper_poll Simulation beginning[0m
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([], 0) 

DEBUG:RBC_Simulator:Add n=0 delay to ideal world wrapper
DEBUG:RBC_Simulator:		[94m poll Simulation finished[0m
DEBUG:WrappedProtocolWrapper:[1m[WrappedProtocol PWrapper][0m Creating new party with pid: 3
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 6
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), msg=('send', ('ECHO', 2))
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 2), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 7
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 2), 4, 3), 'F_chan'), msg=('send', ('ECHO', 2))
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 8
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan'), msg=('send', ('ECHO', 2))
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([((('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('schedule', 7, 3, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('send', ('ECHO', 2)), 0), ((('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 2), 4, 3), 'F_chan'), ('schedule', 7, 4, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 2), 4, 3), 'F_chan'), ('send', ('ECHO', 2)), 0), ((('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan'), ('schedule', 7, 5, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan'), ('send', ('ECHO', 2)), 0)], 0) 

DEBUG:RBC_Simulator:Add n=3 delay to ideal world wrapper
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([], 0) 

DEBUG:RBC_Simulator:Add n=0 delay to ideal world wrapper
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([], 0) 

DEBUG:RBC_Simulator:Add n=0 delay to ideal world wrapper
DEBUG:WrappedProtocolWrapper:[1m[WrappedProtocol PWrapper][0m Creating new party with pid: 4
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([], 0) 

DEBUG:RBC_Simulator:Add n=0 delay to ideal world wrapper
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([], 0) 

DEBUG:RBC_Simulator:Add n=0 delay to ideal world wrapper
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([], 0) 

DEBUG:RBC_Simulator:Add n=0 delay to ideal world wrapper
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([], 0) 

DEBUG:RBC_Simulator:Add n=0 delay to ideal world wrapper
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 7, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 9
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 7, 3), 'F_chan'), msg=('send', ('ECHO', 1))
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 7, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 10

		[93m [IDEAL WORLD] [0m

sid ('sid', ('one', (1, 2, 3, 4), 3))
crupted ('crupt', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 10))
[sid=wrap, pid=me, imp_in=0, imp_out=0, spend=0, marked=0]
New cls F_bracha <class 'syn_ours.f_bracha.Syn_Bracha_Functionality'>
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=0, imp_out=0, spend=0, marked=0]
sid ('sid', ('one', (1, 2, 3, 4), 3))
crupted ('crupt',)
[sid=wrap, pid=me, imp_in=0, imp_out=0, spend=0, marked=0]
New cls F_chan <class 'f_channel.Syn_Channel'>
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=0, imp_out=0, spend=0, marked=0]
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=16, imp_out=0, spend=0, marked=0]
[0m
[sid=('one', (1, 2, 3, 4), 3), pid=1, imp_in=32, imp_out=0, spend=0, marked=0]
[sid=('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 1, 3), pid=-1, imp_in=32, imp_out=0, spend=0, marked=0]
Party send ('send', ('VAL', 1))

[1m {1: [], 4: [('send_message', (('send', ('VAL', 1)), 0))]} 

delay=0[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=48, imp_out=0, spend=0, marked=0]
[0m
[sid=('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 1, 3), pid=-1, imp_in=64, imp_out=0, spend=0, marked=0]
Party send ('send', ('VAL', 2))

[1m {1: [], 4: [('send_message', (('send', ('VAL', 1)), 0)), ('send_message', (('send', ('VAL', 2)), 0))]} 

delay=1[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=132, imp_out=0, spend=0, marked=0]
[0m
[91m poll delay=2[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=132, imp_out=2, spend=0, marked=0]
[0m
[91m poll delay=2[0m
[91m poll delay=1[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=132, imp_out=2, spend=0, marked=0]
[0m
[91m poll delay=1[0m
[91m poll delay=1[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=132, imp_out=3, spend=0, marked=0]
[0m
[91m poll delay=0[0m

[1m {1: [], 4: [('send_message', (('send', ('VAL', 2)), 0))]} 

delay=0[0m
[91m [F_channel to=2, from=1] ('send', ('VAL', 1))[0m
[sid=('one', (1, 2, 3, 4), 3), pid=2, imp_in=132, imp_out=4, spend=0, marked=0]
[sid=('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), pid=-1, imp_in=132, imp_out=4, spend=0, marked=0]
Party send ('send', ('ECHO', 1))

[1m {1: [], 4: [('send_message', (('send', ('VAL', 2)), 0))], 7: [('send_message', (('send', ('ECHO', 1)), 0))]} 

delay=0[0m
[sid=('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 3), 4, 3), pid=-1, imp_in=132, imp_out=4, spend=0, marked=0]
Party send ('send', ('ECHO', 1))

[1m {1: [], 4: [('send_message', (('send', ('VAL', 2)), 0))], 7: [('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0))]} 

delay=1[0m
[sid=('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 4), 4, 3), pid=-1, imp_in=132, imp_out=4, spend=0, marked=0]
Party send ('send', ('ECHO', 1))

[1m {1: [], 4: [('send_message', (('send', ('VAL', 2)), 0))], 7: [('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0))]} 

delay=2[0m
[91m poll delay=4[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=132, imp_out=7, spend=0, marked=0]
[0m
[91m poll delay=3[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=132, imp_out=7, spend=0, marked=0]
[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=132, imp_out=7, spend=0, marked=0]
[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0))]} 

delay=2[0m
[91m [F_channel to=3, from=1] ('send', ('VAL', 2))[0m
[sid=('one', (1, 2, 3, 4), 3), pid=3, imp_in=132, imp_out=7, spend=0, marked=0]
[sid=('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), pid=-1, imp_in=132, imp_out=7, spend=0, marked=0]
Party send ('send', ('ECHO', 2))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 2)), 0))]} 

delay=2[0m
[sid=('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 2), 4, 3), pid=-1, imp_in=132, imp_out=7, spend=0, marked=0]
Party send ('send', ('ECHO', 2))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('ECHO', 2)), 0))]} 

delay=3[0m
[sid=('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 4), 4, 3), pid=-1, imp_in=132, imp_out=7, spend=0, marked=0]
Party send ('send', ('ECHO', 2))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('ECHO', 2)), 0))]} 

delay=4[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=132, imp_out=10, spend=0, marked=0]
[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('ECHO', 2)), 0))]} 

delay=5[0m
[91m [F_channel to=1, from=2] ('send', ('ECHO', 1))[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=132, imp_out=10, spend=0, marked=0]
[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('ECHO', 2)), 0))]} 

delay=5[0m
[91m [F_channel to=3, from=2] ('send', ('ECHO', 1))[0m
[90m[3] Num echos 1, required: 2[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=132, imp_out=10, spend=0, marked=0]
[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('ECHO', 2)), 0))]} 

delay=5[0m
[91m [F_channel to=4, from=2] ('send', ('ECHO', 1))[0m
[sid=('one', (1, 2, 3, 4), 3), pid=4, imp_in=132, imp_out=10, spend=0, marked=0]
[90m[4] Num echos 1, required: 2[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=132, imp_out=10, spend=0, marked=0]
[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('ECHO', 2)), 0))]} 

delay=5[0m
[91m [F_channel to=1, from=3] ('send', ('ECHO', 2))[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=132, imp_out=10, spend=0, marked=0]
[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 2)), 0))]} 

delay=5[0m
[91m [F_channel to=2, from=3] ('send', ('ECHO', 2))[0m
[90m[2] Num echos 1, required: 2[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=132, imp_out=10, spend=0, marked=0]
[0m

[1m {1: [], 4: [], 7: []} 

delay=5[0m
[91m [F_channel to=4, from=3] ('send', ('ECHO', 2))[0m
[90m[4] Num echos 1, required: 2[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=135, imp_out=10, spend=0, marked=0]
[0m
[sid=('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 7, 3), pid=-1, imp_in=138, imp_out=10, spend=0, marked=0]
Party send ('send', ('ECHO', 1))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 1)), 0))]} 

delay=5[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=141, imp_out=10, spend=0, marked=0]
[0m
[sid=('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 7, 3), pid=-1, imp_in=144, imp_out=10, spend=0, marked=0]
Party send ('send', ('ECHO', 2))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 2)), 0))]}DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 7, 3), 'F_chan'), msg=('send', ('ECHO', 2))
DEBUG:RBC_Simulator:		[94m wrapper_poll Simulation beginning[0m
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 7, 3), 'F_chan'), ('schedule', 7, 0, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 7, 3), 'F_chan'), ('send', ('ECHO', 1)), 0), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 7, 3), 'F_chan'), ('schedule', 7, 1, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 7, 3), 'F_chan'), ('send', ('ECHO', 2)), 0)], 0) 

DEBUG:RBC_Simulator:Add n=2 delay to ideal world wrapper
DEBUG:RBC_Simulator:		[94m poll Simulation finished[0m
DEBUG:RBC_Simulator:		[94m wrapper_poll Simulation beginning[0m
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([], 0) 

DEBUG:RBC_Simulator:Add n=0 delay to ideal world wrapper
DEBUG:RBC_Simulator:		[94m poll Simulation finished[0m
DEBUG:RBC_Simulator:		[94m wrapper_poll Simulation beginning[0m
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([], 0) 

DEBUG:RBC_Simulator:Add n=0 delay to ideal world wrapper
DEBUG:RBC_Simulator:		[94m poll Simulation finished[0m
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 11
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), msg=('send', ('READY', 1))
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 3), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 12
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 3), 4, 3), 'F_chan'), msg=('send', ('READY', 1))
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 13
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan'), msg=('send', ('READY', 1))
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([((('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('schedule', 7, 1, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('send', ('READY', 1)), 0), ((('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 3), 4, 3), 'F_chan'), ('schedule', 7, 2, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 3), 4, 3), 'F_chan'), ('send', ('READY', 1)), 0), ((('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan'), ('schedule', 7, 3, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan'), ('send', ('READY', 1)), 0)], 0) 

DEBUG:RBC_Simulator:Add n=3 delay to ideal world wrapper
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 14
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), msg=('send', ('READY', 2))
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 2), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 15
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 2), 4, 3), 'F_chan'), msg=('send', ('READY', 2))
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 16
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan'), msg=('send', ('READY', 2))
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([((('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('schedule', 7, 3, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('send', ('READY', 2)), 0), ((('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 2), 4, 3), 'F_chan'), ('schedule', 7, 4, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 2), 4, 3), 'F_chan'), ('send', ('READY', 2)), 0), ((('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan'), ('schedule', 7, 5, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan'), ('send', ('READY', 2)), 0)], 0) 

DEBUG:RBC_Simulator:Add n=3 delay to ideal world wrapper
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([], 0) 

DEBUG:RBC_Simulator:Add n=0 delay to ideal world wrapper
DEBUG:syn_ours.broken_prot_bracha:[3] Num readys 1
DEBUG:syn_ours.broken_prot_bracha:required 2
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([], 0) 

DEBUG:RBC_Simulator:Add n=0 delay to ideal world wrapper
DEBUG:syn_ours.broken_prot_bracha:[4] Num readys 1
DEBUG:syn_ours.broken_prot_bracha:required 2
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([], 0) 

DEBUG:RBC_Simulator:Add n=0 delay to ideal world wrapper
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([], 0) 

DEBUG:RBC_Simulator:Add n=0 delay to ideal world wrapper
DEBUG:syn_ours.broken_prot_bracha:[2] Num readys 1
DEBUG:syn_ours.broken_prot_bracha:required 2
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([], 0) 

DEBUG:RBC_Simulator:Add n=0 delay to ideal world wrapper
DEBUG:syn_ours.broken_prot_bracha:[4] Num readys 1
DEBUG:syn_ours.broken_prot_bracha:required 2
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([], 0) 

DEBUG:RBC_Simulator:Add n=0 delay to ideal world wrapper
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 13, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 17
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 13, 3), 'F_chan'), msg=('send', ('READY', 1))
DEBUG:syn_ours.broken_prot_bracha:[2] Num readys 2
DEBUG:syn_ours.broken_prot_bracha:required 2
DEBUG:RBC_Simulator:sin_get_leaks asking for leaks
DEBUG:RBC_Simulator:
	 leaks = MSG:([((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 13, 3), 'F_chan'), ('schedule', 7, 0, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 13, 3), 'F_chan'), ('send', ('READY', 1)), 0)], 0) 

DEBUG:RBC_Simulator:Add n=1 delay to ideal world wrapper
DEBUG:RBC_Simulator:[91m Got some output from pid=2, msg=1[0m
DEBUG:WrappedPartyWrapper:[1m[Wrapped Party ('one', (1, 2, 3, 4), 3)][0m Creating new party with pid: 1
DEBUG:syn_ours.f_bracha:Party msg in bracha MSG:(((('one', (1, 2, 3, 4), 3), 1), ('input', 1)), 0)
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 15, sender: (('one', (1, 2, 3, 4), 3), 'F_bracha')
DEBUG:f_wrapper:total_queue_ever: 1
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 15, sender: (('one', (1, 2, 3, 4), 3), 'F_bracha')
DEBUG:f_wrapper:total_queue_ever: 2
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 15, sender: (('one', (1, 2, 3, 4), 3), 'F_bracha')
DEBUG:f_wrapper:total_queue_ever: 3
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 15, sender: (('one', (1, 2, 3, 4), 3), 'F_bracha')
DEBUG:f_wrapper:total_queue_ever: 4
 

delay=6[0m
[91m poll delay=6[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=144, imp_out=10, spend=0, marked=0]
[0m
[91m poll delay=7[0m
[91m poll delay=7[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=144, imp_out=12, spend=0, marked=0]
[0m
[91m poll delay=6[0m
[91m poll delay=6[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=144, imp_out=12, spend=0, marked=0]
[0m
[91m poll delay=5[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=144, imp_out=12, spend=0, marked=0]
[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 2)), 0))]} 

delay=4[0m
[91m [F_channel to=2, from=1] ('send', ('ECHO', 1))[0m
[90m[2] Num echos 2, required: 2[0m
Party send ('send', ('READY', 1))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('READY', 1)), 0))]} 

delay=4[0m
Party send ('send', ('READY', 1))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0))]} 

delay=5[0m
Party send ('send', ('READY', 1))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0))]} 

delay=6[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=144, imp_out=15, spend=0, marked=0]
[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0))]} 

delay=7[0m
[91m [F_channel to=3, from=1] ('send', ('ECHO', 2))[0m
[90m[3] Num echos 2, required: 2[0m
Party send ('send', ('READY', 2))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 2)), 0))]} 

delay=7[0m
Party send ('send', ('READY', 2))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 2)), 0)), ('send_message', (('send', ('READY', 2)), 0))]} 

delay=8[0m
Party send ('send', ('READY', 2))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 2)), 0)), ('send_message', (('send', ('READY', 2)), 0)), ('send_message', (('send', ('READY', 2)), 0))]} 

delay=9[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=144, imp_out=18, spend=0, marked=0]
[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 2)), 0)), ('send_message', (('send', ('READY', 2)), 0)), ('send_message', (('send', ('READY', 2)), 0))]} 

delay=10[0m
[91m [F_channel to=1, from=2] ('send', ('READY', 1))[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=144, imp_out=18, spend=0, marked=0]
[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 2)), 0)), ('send_message', (('send', ('READY', 2)), 0)), ('send_message', (('send', ('READY', 2)), 0))]} 

delay=10[0m
[91m [F_channel to=3, from=2] ('send', ('READY', 1))[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=144, imp_out=18, spend=0, marked=0]
[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('READY', 2)), 0)), ('send_message', (('send', ('READY', 2)), 0)), ('send_message', (('send', ('READY', 2)), 0))]} 

delay=10[0m
[91m [F_channel to=4, from=2] ('send', ('READY', 1))[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=144, imp_out=18, spend=0, marked=0]
[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('READY', 2)), 0)), ('send_message', (('send', ('READY', 2)), 0))]} 

delay=10[0m
[91m [F_channel to=1, from=3] ('send', ('READY', 2))[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=144, imp_out=18, spend=0, marked=0]
[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('READY', 2)), 0))]} 

delay=10[0m
[91m [F_channel to=2, from=3] ('send', ('READY', 2))[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=144, imp_out=18, spend=0, marked=0]
[0m

[1m {1: [], 4: [], 7: []} 

delay=10[0m
[91m [F_channel to=4, from=3] ('send', ('READY', 2))[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=144, imp_out=18, spend=0, marked=0]
[0m
[sid=('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 13, 3), pid=-1, imp_in=144, imp_out=18, spend=0, marked=0]
Party send ('send', ('READY', 1))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('READY', 1)), 0))]} 

delay=10[0m
[93m adding exra delay 1
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=144, imp_out=18, spend=0, marked=0]
[0m

[1m {1: [], 4: [], 7: []} 

delay=11[0m
[91m [F_channel to=2, from=1] ('send', ('READY', 1))[0m
[92m [2] Accepted input 1[0m
[sid=('one', (1, 2, 3, 4), 3), pid=1, imp_in=0, imp_out=0, spend=0, marked=0]
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=0, imp_out=0, spend=0, marked=0]

[1m {16: [('send_output', ((('one', (1, 2, 3, 4), 3), 1), 1))], 1: []} 

delay=12[0m

[1m {16: [('send_output', ((('one', (1, 2, 3, 4), 3), 1), 1)), ('send_output', ((('one', (1, 2, 3, 4), 3), 2), 1))], 1: []} 

delay=13[0m

[1m {16: [('send_output', ((('one', (1, 2, 3, 4), 3), 1), 1)), ('send_output', ((('one', (1, 2, 3, 4), 3), 2), 1)), ('send_output', ((('one', (1, 2, 3, 4), 3), 3), 1))], 1: []} 

delay=14[0m

[1m {16: [('send_output', ((('one', (1, 2, 3, 4), 3), 1), 1)), ('send_output', ((('one', (1, 2, 3, 4), 3), 2), 1)), ('send_output', ((('one', (1, 2, 3, 4), 3), 3), 1)), ('send_output', ((('one', (1, 2, 3, 4), 3), 4), 1))], 1: []} 

delay=15[0m
Transcript ["a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 1, 3), 'F_chan'), 'OK'))", "a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 1, 3), 'F_chan'), 'OK'))", "a2z: [((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 1, 3), 'F_chan'), ('schedule', 4, 0, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 1, 3), 'F_chan'), ('send', ('VAL', 1)), 0), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 1, 3), 'F_chan'), ('schedule', 4, 1, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 1, 3), 'F_chan'), ('send', ('VAL', 2)), 0)]", "a2z: ('poll',)", "a2z: ('poll',)", "a2z: ('poll',)", "a2z: ((('one', (1, 2, 3, 4), 3), 1), ('round', 4))", "a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('send', ('ECHO', 1))))", "a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('send', ('ECHO', 2))))", "a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 7, 3), 'F_chan'), 'OK'))", "a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 7, 3), 'F_chan'), 'OK'))", "a2z: ('poll',)", "a2z: ('poll',)", "a2z: ('poll',)", "a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('send', ('READY', 1))))", "a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('send', ('READY', 2))))", "a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 13, 3), 'F_chan'), 'OK'))"]

		[93m [REAL WORLD] [0m

sid ('sid', ('one', (1, 2, 3, 4), 3))Traceback (most recent call last):
  File "src/gevent/greenlet.py", line 716, in gevent._greenlet.Greenlet.run
  File "/home/surya/projects/uc/sprites/src/itm.py", line 179, in run
    self.handlers[r](d)
  File "/home/surya/projects/uc/sprites/src/syn_ours/f_bracha.py", line 339, in env_msg
    self.env_exec(msg[1], msg[2])
  File "/home/surya/projects/uc/sprites/src/syn_ours/f_bracha.py", line 190, in env_exec
    self.sim_party_output(m)
  File "/home/surya/projects/uc/sprites/src/syn_ours/f_bracha.py", line 375, in sim_party_output
    fro,m = waits(self.pump, self.channels['p2a']).msg
ValueError: too many values to unpack (expected 2)
2020-05-05T18:23:35Z <Greenlet "Greenlet-0" at 0x7f7913839348: <bound method ITM.run of <syn_ours.f_bracha.RBC_Simulator object at 0x7f79138af710>>> failed with ValueError

DEBUG:WrappedProtocolWrapper:[1m[WrappedProtocol PWrapper][0m Creating new party with pid: 1
DEBUG:WrappedProtocolWrapper:[1m[1][0m Party is corrupt, so ITMCruptWrappedPassthrough
DEBUG:f_channel:delta 3, import: 16
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 1, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 1
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 1, 3), 'F_chan'), msg=('send', ('VAL', 1))
DEBUG:f_channel:delta 3, import: 16
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 1, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 2
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 1, 3), 'F_chan'), msg=('send', ('VAL', 2))
DEBUG:WrappedProtocolWrapper:[1m[WrappedProtocol PWrapper][0m Creating new party with pid: 2
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 3
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), msg=('send', ('ECHO', 1))
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 3), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 4
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 3), 4, 3), 'F_chan'), msg=('send', ('ECHO', 1))
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 5
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan'), msg=('send', ('ECHO', 1))
DEBUG:WrappedProtocolWrapper:[1m[WrappedProtocol PWrapper][0m Creating new party with pid: 3
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 6
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), msg=('send', ('ECHO', 2))
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 2), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 7
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 2), 4, 3), 'F_chan'), msg=('send', ('ECHO', 2))
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 8
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan'), msg=('send', ('ECHO', 2))
DEBUG:WrappedProtocolWrapper:[1m[WrappedProtocol PWrapper][0m Creating new party with pid: 4
DEBUG:f_channel:delta 3, import: 3
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 7, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 9
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 7, 3), 'F_chan'), msg=('send', ('ECHO', 1))
DEBUG:f_channel:delta 3, import: 3
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 7, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 10
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 7, 3), 'F_chan'), msg=('send', ('ECHO', 2))
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 11
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), msg=('send', ('READY', 1))
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 3), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 12
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 3), 4, 3), 'F_chan'), msg=('send', ('READY', 1))
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 13
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan'), msg=('send', ('READY', 1))
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 14
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), msg=('send', ('READY', 2))
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 2), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 15
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 2), 4, 3), 'F_chan'), msg=('send', ('READY', 2))
DEBUG:syn_ours.broken_prot_bracha:
sending import: 0
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 16
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 4), 4, 3), 'F_chan'), msg=('send', ('READY', 2))

crupted ('crupt', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 10))
[sid=wrap, pid=me, imp_in=0, imp_out=0, spend=0, marked=0]
New cls F_chan <class 'f_channel.Syn_Channel'>
[sid=('one', (1, 2, 3, 4), 3), pid=-1, imp_in=0, imp_out=0, spend=0, marked=0]
[sid=('one', (1, 2, 3, 4), 3), pid=1, imp_in=0, imp_out=0, spend=0, marked=0]
[sid=('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 1, 3), pid=-1, imp_in=0, imp_out=0, spend=0, marked=0]
Party send ('send', ('VAL', 1))

[1m {1: [], 4: [('send_message', (('send', ('VAL', 1)), 16))]} 

delay=0[0m
[sid=('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 1, 3), pid=-1, imp_in=0, imp_out=0, spend=0, marked=0]
Party send ('send', ('VAL', 2))

[1m {1: [], 4: [('send_message', (('send', ('VAL', 1)), 16)), ('send_message', (('send', ('VAL', 2)), 16))]} 

delay=1[0m
[91m poll delay=2[0m
[91m poll delay=1[0m
[91m poll delay=0[0m

[1m {1: [], 4: [('send_message', (('send', ('VAL', 2)), 16))]} 

delay=0[0m
[91m [F_channel to=2, from=1] ('send', ('VAL', 1))[0m
[sid=('one', (1, 2, 3, 4), 3), pid=2, imp_in=0, imp_out=0, spend=0, marked=0]
[sid=('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), pid=-1, imp_in=0, imp_out=0, spend=0, marked=0]
Party send ('send', ('ECHO', 1))

[1m {1: [], 4: [('send_message', (('send', ('VAL', 2)), 16))], 7: [('send_message', (('send', ('ECHO', 1)), 0))]} 

delay=0[0m
[sid=('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 3), 4, 3), pid=-1, imp_in=0, imp_out=0, spend=0, marked=0]
Party send ('send', ('ECHO', 1))

[1m {1: [], 4: [('send_message', (('send', ('VAL', 2)), 16))], 7: [('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0))]} 

delay=1[0m
[sid=('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 4), 4, 3), pid=-1, imp_in=0, imp_out=0, spend=0, marked=0]
Party send ('send', ('ECHO', 1))

[1m {1: [], 4: [('send_message', (('send', ('VAL', 2)), 16))], 7: [('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0))]} 

delay=2[0m
[91m poll delay=3[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0))]} 

delay=2[0m
[91m [F_channel to=3, from=1] ('send', ('VAL', 2))[0m
[sid=('one', (1, 2, 3, 4), 3), pid=3, imp_in=0, imp_out=0, spend=0, marked=0]
[sid=('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), pid=-1, imp_in=0, imp_out=0, spend=0, marked=0]
Party send ('send', ('ECHO', 2))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 2)), 0))]} 

delay=2[0m
[sid=('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 2), 4, 3), pid=-1, imp_in=0, imp_out=0, spend=0, marked=0]
Party send ('send', ('ECHO', 2))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('ECHO', 2)), 0))]} 

delay=3[0m
[sid=('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 4), 4, 3), pid=-1, imp_in=0, imp_out=0, spend=0, marked=0]
Party send ('send', ('ECHO', 2))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('ECHO', 2)), 0))]} 

delay=4[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('ECHO', 2)), 0))]} 

delay=5[0m
[91m [F_channel to=1, from=2] ('send', ('ECHO', 1))[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 1)), 0)), ('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('ECHO', 2)), 0))]} 

delay=5[0m
[91m [F_channel to=3, from=2] ('send', ('ECHO', 1))[0m
[90m[3] Num echos 1, required: 2[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('ECHO', 2)), 0))]} 

delay=5[0m
[91m [F_channel to=4, from=2] ('send', ('ECHO', 1))[0m
[sid=('one', (1, 2, 3, 4), 3), pid=4, imp_in=0, imp_out=0, spend=0, marked=0]
[90m[4] Num echos 1, required: 2[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 2)), 0)), ('send_message', (('send', ('ECHO', 2)), 0))]} 

delay=5[0m
[91m [F_channel to=1, from=3] ('send', ('ECHO', 2))[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 2)), 0))]} 

delay=5[0m
[91m [F_channel to=2, from=3] ('send', ('ECHO', 2))[0m
[90m[2] Num echos 1, required: 2[0m

[1m {1: [], 4: [], 7: []} 

delay=5[0m
[91m [F_channel to=4, from=3] ('send', ('ECHO', 2))[0m
[90m[4] Num echos 1, required: 2[0m
[sid=('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 7, 3), pid=-1, imp_in=0, imp_out=0, spend=0, marked=0]
Party send ('send', ('ECHO', 1))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 1)), 3))]} 

delay=5[0m
[sid=('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 7, 3), pid=-1, imp_in=0, imp_out=0, spend=0, marked=0]
Party send ('send', ('ECHO', 2))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 1)), 3)), ('send_message', (('send', ('ECHO', 2)), 3))]} 

delay=6[0m
[91m poll delay=7[0m
[91m poll delay=6[0m
[91m poll delay=5[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 2)), 3))]} 

delay=4[0m
[91m [F_channel to=2, from=1] ('send', ('ECHO', 1))[0m
[90m[2] Num echos 2, required: 2[0m
Party send ('send', ('READY', 1))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 2)), 3)), ('send_message', (('send', ('READY', 1)), 0))]} 

delay=4[0m
Party send ('send', ('READY', 1))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 2)), 3)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0))]} 

delay=5[0m
Party send ('send', ('READY', 1))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('ECHO', 2)), 3)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0))]} 

delay=6[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0))]} 

delay=7[0m
[91m [F_channel to=3, from=1] ('send', ('ECHO', 2))[0m
[90m[3] Num echos 2, required: 2[0m
Party send ('send', ('READY', 2))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 2)), 0))]} 

delay=7[0m
Party send ('send', ('READY', 2))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 2)), 0)), ('send_message', (('send', ('READY', 2)), 0))]} 

delay=8[0m
Party send ('send', ('READY', 2))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 2)), 0)), ('send_message', (('send', ('READY', 2)), 0)), ('send_message', (('send', ('READY', 2)), 0))]} 

delay=9[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 2)), 0)), ('send_message', (('send', ('READY', 2)), 0)), ('send_message', (('send', ('READY', 2)), 0))]}DEBUG:syn_ours.broken_prot_bracha:[3] Num readys 1
DEBUG:syn_ours.broken_prot_bracha:required 2
DEBUG:syn_ours.broken_prot_bracha:[4] Num readys 1
DEBUG:syn_ours.broken_prot_bracha:required 2
DEBUG:syn_ours.broken_prot_bracha:[2] Num readys 1
DEBUG:syn_ours.broken_prot_bracha:required 2
DEBUG:syn_ours.broken_prot_bracha:[4] Num readys 1
DEBUG:syn_ours.broken_prot_bracha:required 2
DEBUG:f_channel:delta 3, import: 0
DEBUG:f_wrapper:[1mFschedule[0m delta: 0, import: 3, sender: (('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 13, 3), 'F_chan')
DEBUG:f_wrapper:total_queue_ever: 17
DEBUG:f_wrapper:Leaking information, sender=(('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 13, 3), 'F_chan'), msg=('send', ('READY', 1))
DEBUG:syn_ours.broken_prot_bracha:[2] Num readys 2
DEBUG:syn_ours.broken_prot_bracha:required 2
 

delay=10[0m
[91m [F_channel to=1, from=2] ('send', ('READY', 1))[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('READY', 1)), 0)), ('send_message', (('send', ('READY', 2)), 0)), ('send_message', (('send', ('READY', 2)), 0)), ('send_message', (('send', ('READY', 2)), 0))]} 

delay=10[0m
[91m [F_channel to=3, from=2] ('send', ('READY', 1))[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('READY', 2)), 0)), ('send_message', (('send', ('READY', 2)), 0)), ('send_message', (('send', ('READY', 2)), 0))]} 

delay=10[0m
[91m [F_channel to=4, from=2] ('send', ('READY', 1))[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('READY', 2)), 0)), ('send_message', (('send', ('READY', 2)), 0))]} 

delay=10[0m
[91m [F_channel to=1, from=3] ('send', ('READY', 2))[0m

[1m {1: [], 4: [], 7: [('send_message', (('send', ('READY', 2)), 0))]} 

delay=10[0m
[91m [F_channel to=2, from=3] ('send', ('READY', 2))[0m

[1m {1: [], 4: [], 7: []} 

delay=10[0m
[91m [F_channel to=4, from=3] ('send', ('READY', 2))[0m
[sid=('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 13, 3), pid=-1, imp_in=0, imp_out=0, spend=0, marked=0]
Party send ('send', ('READY', 1))

[1m {1: [], 4: [], 7: [('send_message', (('send', ('READY', 1)), 0))]} 

delay=10[0m

[1m {1: [], 4: [], 7: []} 

delay=11[0m
[91m [F_channel to=2, from=1] ('send', ('READY', 1))[0m
[92m [2] Accepted input 1[0m
Transcript ["a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 1, 3), 'F_chan'), 'OK'))", "a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 1, 3), 'F_chan'), 'OK'))", "a2z: [((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 1, 3), 'F_chan'), ('schedule', 4, 0, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 1, 3), 'F_chan'), ('send', ('VAL', 1)), 0), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 1, 3), 'F_chan'), ('schedule', 4, 1, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 1, 3), 'F_chan'), ('send', ('VAL', 2)), 0)]", "a2z: ('poll',)", "a2z: ('poll',)", "a2z: ('poll',)", "a2z: ((('one', (1, 2, 3, 4), 3), 1), ('round', 4))", "a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('send', ('ECHO', 1))))", "a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('send', ('ECHO', 2))))", "a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 7, 3), 'F_chan'), 'OK'))", "a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 7, 3), 'F_chan'), 'OK'))", "a2z: ('poll',)", "a2z: ('poll',)", "a2z: ('poll',)", "a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('send', ('READY', 1))))", "a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('send', ('READY', 2))))", "a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 13, 3), 'F_chan'), 'OK'))", "p2z: ((('one', (1, 2, 3, 4), 3), 2), 1)"]

	[93m Ideal transcript[0m
a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 1, 3), 'F_chan'), 'OK'))
a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 1, 3), 'F_chan'), 'OK'))
a2z: [((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 1, 3), 'F_chan'), ('schedule', 4, 0, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 1, 3), 'F_chan'), ('send', ('VAL', 1)), 0), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 1, 3), 'F_chan'), ('schedule', 4, 1, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 1, 3), 'F_chan'), ('send', ('VAL', 2)), 0)]
a2z: ('poll',)
a2z: ('poll',)
a2z: ('poll',)
a2z: ((('one', (1, 2, 3, 4), 3), 1), ('round', 4))
a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('send', ('ECHO', 1))))
a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('send', ('ECHO', 2))))
a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 7, 3), 'F_chan'), 'OK'))
a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 7, 3), 'F_chan'), 'OK'))
a2z: ('poll',)
a2z: ('poll',)
a2z: ('poll',)
a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('send', ('READY', 1))))
a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('send', ('READY', 2))))
a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 13, 3), 'F_chan'), 'OK'))

	[93m real transcript[0m
a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 1, 3), 'F_chan'), 'OK'))
a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 1, 3), 'F_chan'), 'OK'))
a2z: [((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 1, 3), 'F_chan'), ('schedule', 4, 0, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 1, 3), 'F_chan'), ('send', ('VAL', 1)), 0), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 1, 3), 'F_chan'), ('schedule', 4, 1, 'send_message'), 0), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 1, 3), 'F_chan'), ('send', ('VAL', 2)), 0)]
a2z: ('poll',)
a2z: ('poll',)
a2z: ('poll',)
a2z: ((('one', (1, 2, 3, 4), 3), 1), ('round', 4))
a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('send', ('ECHO', 1))))
a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('send', ('ECHO', 2))))
a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 7, 3), 'F_chan'), 'OK'))
a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 3), 7, 3), 'F_chan'), 'OK'))
a2z: ('poll',)
a2z: ('poll',)
a2z: ('poll',)
a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 2), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('send', ('READY', 1))))
a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 3), (('one', (1, 2, 3, 4), 3), 1), 4, 3), 'F_chan'), ('send', ('READY', 2))))
a2z: ((('one', (1, 2, 3, 4), 3), 1), ((('one', (('one', (1, 2, 3, 4), 3), 1), (('one', (1, 2, 3, 4), 3), 2), 13, 3), 'F_chan'), 'OK'))
p2z: ((('one', (1, 2, 3, 4), 3), 2), 1)
[91m[Distinguisher] They're different[0m
