1. Where is the line between using "pid" to do access control versus using "pseudonyms"? 
	For example, in the multisig functionality, the "parties" in the wallet are just identified by pid.
	The pid is used for access control, but when a transfer is created, it is sent to an "addr".
	For the purpose of simulation, are pseudonyms to be used for all functionalities so that the environment can input a signature (or key pair) to the real world, to be used with G_ledger.
	There is no signature validation (so I suppose that's next thing to implement, unless there's a consistent shortcut and it's not necessary.

2. Is gevent really necessary for this communication?
	Interparty communication is asyn and goes through some functionality that stores messages and allows polling.
	Aside from that, there are no concurrent messages and activation order is well defined.
	Gevent just seems to make that more difficult because you have to sleep to wait for things to happen in order because you're relying on gevent Queues() instead of just direction function-calling. 
	Even though it's descibred as async, it's made sync by the activation ordering.


3. Should the simulator (hence the multi-sig functionality still be able to communicate with G_ledger)?
	- example: Multisig wallet is instructed to pay some "addr" on the blockchain. The environment expects the blockchain to reflect the transfer by changing the balance of the recipient of the payment. The functionality as defined gives a "transfer" operation to G_ledger which executes the transfer when a multi-sig transfer is authorized. Effectively, this means that the balance on the blockchain of the recipient will be modified twice. Should the simulator simulate the transactions to G_ledger as well? I suppose that's expected behavior on the part of the environment since it still can't distinguish...

4. We want to buffer the deposit, confirm, transfer in f_multisig, but buffering here is unclear. The environment expects buffering to happen through "tick" messages given to g_ledger. Buffering arbitrarily in the functionality no longer works as the buffering in the ideal world isn't synchronized with the real world buffering. Approach: everytime someone causes activation of the functionality, it should check the blockchain for block number and release buffered commands based on that? When should buffers be checked? everytime itm is activated?

5. Clarification on simulation, is indistinguishability is the same as seeing the same affect on state or just not being able to tell which of the two environments is real. In the case of transfer adding "val" twice to some address, is that okay? It's still indistinguishable since Z doesn't really know which one is the real and either could double the addition to the account.

6. Is EVM necessary outside of doing simulation experiment on G_ledger directly? In that case, the environment would expect to give solidity input to both real and ideal worlds and they'd have to deal with it. Perhaps parametization with some compiler. In the real world we have compiler that transforms (solidity --> evm), in the ideal world what is this parameterized function? 
	- THIS IS A BIG TODO IF NECESSARY

THINGS TO CHANGE
=================

Currently the blockchain tracks the contract balance but the contract has no way of tracking that.
Therefore, the way that I have it now is that each contract tracks balance (like a token contract), but when a payment is made the blockchain asserts the actual balance that it is storing.
	- Change this to actually give contract access to it's balance, perhaps through a blockchain ref or part of txref. If there's some thing where I can have a pointer to a value I can pass it in the init parameter and it just reads the blockchain balance when it wants to access balance.


1. Didn't buffer all the transactions for deposit, confirm, transfer request for the functionality.


Create protected mode where parties can only see SIDs and the underlying G_ledger sees pseudonyms that can be modified versions from SIDs so there's not reliance by the functonality on the address used in the contract deployed in the real world.  


22/03/2019
===========
~v~ protected mode wrapper is what HONEST parties followand adversary can choose to arbitrarily violate this convention and directly access the G_ledger functionality
- write the simulator fot the multisig functionality
~v~ environment simulating honest parties can ONLY access the protected mode wrapper
- READ UP ON HOW SIDs are and identities are calculated 
- ITIs need some way to assert what contract they are interacting with if, in fact, the other party is malicious and gives a broken contract
	+ UC allows program PI to check certain properties of the code that the ITI being called, possesses

TODO
------
1. Test that the balance subroutine works with g_ledger
2. deposit actually creates a transactions and sends the wallet some money
3. the wallet needs to check it's own balance as well as process_buffer on every invocation
4. only confirm needs to wait, then immediately create the transaction in g_ledger and that will do the waiting for you
5. simulator 



todo 4/29
==========
(X) adversary leaks are just written to a buffer to be consumed instead of using a 'write' action~~~
( ) the adversary can choose how much to delay messages to the blockchain
( ) the adversary can choose how much to delay messages between parties through f_broadcast
( ) the adversary can't delay indefinitely, need to be able to force delivery of messages 
( ) update protected mode wrapper to allow ideal functionalities to publish transactions immediately in the next block --> makes timing guarantees simple for functionalities like the payment channel one


Dishonest input pay (5/28/2019)
--------------------
Currently the way it works is that the payment is buffered and processed by process_buffer 8 blockchain blocks after it has been created.
Why not just submit the transaction to the chain and let the adversary decide the delay?
Need a better scheme for ensuring honest majority so that eventually some honest miner comes along and mines all available transaction in order of fee.

Clock sending multiple bits (isn't really a problem)
-----------------------------------------------------
a more relaxed notion is with delta time delay for notifying each party that the round has advanced
this is better than some exactly synchronized clock where adversary chooses how much to delay delivery of round advancing
for andrew's counterexample this doesn't work as one of the clocks will always advance the round --> perhaps create maximum timeout and force default value in the clock after some amount of time hanging
that can be determined by the adversary


Need to read up on Perun model and understand it at detail and know the edit distnace between them and us and them and python code base. How do they handle identifiers for contracts, if we actually implemented G_ledger and we implemented their thing on top of it. 

For the anonymous payment model the model is very thorough but the abstraction of another channel representing left and right of the payment and not the intermediaries might not be realizable. Is it? What is the problem in there model if any?


Need to clean up code and finish linked payments.


todo
-----
* fix retardation
* adversary pay just needs to wait for blockchain rounds, not actual transaction
	* create fake transaction??
	* dishonest pay creates message to wait for delivery
	* process buffer delivers and updates the balance after blocks have elapsed
	* adversary (at sompoint) will decide the delay
* simulator has to be changed for the above
	* 


todo 8/26
==========
* change the check_f_state behavior to be done on command and not automatically anytime it is pinged
* this is because according to the functionality in the sprites paper, when f_state gives a new state to the local protocol, the local protocol gives (arr_i, wd_i) to F_state.
	In actuality, this should only happen if arr_i,wd_i has changed since the last round (perhaps f_state can take care of not upating with the same inputs/state??).
	Either way, automatically doing it would mean that it might write to f_state, which means that no subsequent write operation can happen.
	We can't simply return nothing to the environment when check_f_state writes and has to return because that would be broken af, it would get different results based on the order of execution and might not get anything, rip


WHAT TO DO
-----------
So we've changed the "blocks" command to do the pinging and force state update AND state delivery because it needs to be buffered.
In pay inputs, there is no pinging anymore so that state isn't sent stray
what needs to be done is the "pass" at the moment gives "input" which is send straight to F_state as input rather than when "blocks" is called. Therefore, move initial input of state channel into the input.txt as well instead of in the code
that way we can exactly control what "input" does and initialize F_state naturall instead of the way it's done now


Pay protocol:
1. every round inputs are just stored locally
2. when blocks is called, check for new state, send inputs to f_state <-- both inputstrigger output buffered for one round
3. actual round progression
4. read: pings f_state for delivering messages --> only process buffer should do something
	then check for outputs in pay protocol and print them out




Deliver p2p in real world:
	1. message needs to be delayed when some itm writes it
		* instead of translate, the function does translate and puts it in a queue to be delivered at some future time
		* doing this also leaks the message and the round to the adversary
		* the adversary can call `deliver` with the message to make it write to `p2_`
		* the leak is removed from the leaks and the eventually_queue
		* by the definition of `write-once` the eventuall_queue will only ever have one thing in it per party as one party can only write once during execution


Can we check ith fuzzing liveness failures with byzantine failures. It's the one that's hard to get right and find.


---------------------------
Input messages are accepted as usual without checking for roundOK
output messages must wait until first roundOK is resolved, this means dealer can't send to himself unless the RoundOK is resolved
	* does this imply that the dealer must not take input himself and trigger ECHO in some other way?
		> need to trigger the input_val method some other way instead of by reading messages

- show a differentiator between Fsyn and Fbdsec if it is in fact stronger




#TODO: IDENTITY MECHANISM
-------------------
we have a conflict here, when z --> a
the message contains a tag "A2P" or "A2F" that tells it where to go (like haskell)
	but it also contains the ID of the message.

when p --> a or f --> a
the adversary forwards the message with the ID of the party but no tag telling us
	whether this is a party message or a functionality message. The problem this leads
	to is that when the dummy simulator is writing to the dummy adversary, we need to know
	whether to forward this to the f2a or p2a channel of the dummy adversary. For now we 
	can go just on the identity of the thing, but WE REALLY NEED TO CHANGE THIS TO INCLUDE 
	THE TAG

short answer include a tag in the return process as well
	F2A or P2A
